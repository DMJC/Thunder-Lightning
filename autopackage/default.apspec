# -*-shell-script-*-

[Meta]
RootName: @tnlgame.net/tnl:$SOFTWAREVERSION
DisplayName: Thunder And Lightning
PackageDesktop: share/applications/tnlgame.desktop
ShortName: tnl
Maintainer: Jonas Eschenburg <indyjo@gmx.de>
Packager: Jonas Eschenburg <indyjo@gmx.de>
Summary: An Open Source Futuristic Action Flight Simulator
URL: http://tnlgame.net/
License: GNU General Public License, Version 2
SoftwareVersion: 070827
AutopackageTarget: 1.2
#Repository: http://tnlgame.net/autopackage/repository.xml

[BuildPrepare]
# Check for CEGUI directory
if [[ -z "$cegui_dir" ]]; then
  cegui_dir=/home/jonas/src/CEGUI-0.5.0
  green; echo "You didn't specify a CEGUI directory. Defaulting to $cegui_dir."; normal
fi
if [[ ! -d "$cegui_dir" ]]; then
  red; echo "Can't find CEGUI directory. Please pass with environment variable cegui_dir!"; normal
  exit 1
fi

# Check for PCRE directory
if [[ -z "$pcre_dir" ]]; then
  pcre_dir=/home/jonas/src/pcre-7.4
  green; echo "You didn't specify a PCRE directory. Defaulting to $pcre_dir."; normal
fi
if [[ ! -d "$pcre_dir" ]]; then
  red; echo "Can't find PCRE directory. Please pass with environment variable pcre_dir!"; normal
  exit 1
fi

# Check for Io directory
if [[ -z "$io_dir" ]]; then
  io_dir=/home/jonas/src/git/Io
  green; echo "You didn't specify an Io directory. Defaulting to $io_dir."; normal
fi
if [[ ! -d "$io_dir" ]]; then
  red; echo "Can't find Io directory. Please pass with environment variable io_dir!"; normal
  exit 1
fi

# Check for TnL data directory
if [[ -z "$data_dir" ]]; then
  data_dir=/home/jonas/src/TnL-data
  green; echo "You didn't specify a TnL data directory. Defaulting to $data_dir."; normal
fi
if [[ ! -d "$data_dir" ]]; then
  red; echo "Can't dind TnL data directory. Please pass with environment variable data_dir!"; normal
  exit 1
fi

# Set compiler flags
if [[ -z "$CXXFLAGS" ]]; then
  CXXFLAGS="-O3 -march=i686"
  green; echo "You didn't specify any C++ compiler flags. Defaulting to CXXFLAGS=$CXXFLAGS."; normal
fi

# Check whether darcs reports any untracked or modified files in the data repository
if which darcs >/dev/null; then
  untracked=`cd "$data_dir";darcs whatsnew -ls`
  if [[ $untracked != 'No changes!' ]]; then
    red; echo "There are unrecorded changes in the data repository:"
    echo $untracked;
    echo "--> Aborting."; normal
    exit 1
  fi
else
  yellow; echo "Darcs not found. Unable to check whether the data repository is clean."
  normal; echo "Continuing..."
fi

green; echo "Compiling PCRE and installing into $build_root/usr/local."; normal
(cd $pcre_dir && CC=apgcc ./configure --prefix=$build_root/usr/local --enable-shared=false && make install) || exit 1

green; echo "Compiling CEGUI and installing into $build_root/usr/local."; normal
(cd $cegui_dir && \
    CXX=apg++ CC=apgcc ./configure \
    pcre_CFLAGS="" pcre_LIBS=$build_root/lib/libpcre.a \
    --prefix=$build_root/usr/local \
    --disable-xerces-c --disable-libxml --disable-expat --disable-corona \
    --disable-devil --disable-freeimage --disable-silly \
    && make install) || exit 1


green; echo "Installing Io into $build_root/usr/local."; normal
(cd $io_dir && make clean && INSTALL_PREFIX="$PREFIX" CC=apgcc make && INSTALL_PREFIX="$build_root/usr/local" make install) || exit 1
(cd $build_root/usr/local/lib
    rm libiovmall.a
    cd io/addons
    for DIR in *; do
        mv $DIR x-$DIR
    done
    mv x-Random Random
    rm -r x-*/
)
    
    
green; echo "Installing TnL data into $build_root/usr/local."; normal
(cd $data_dir && cp -r share/ "$build_root/usr/local") || exit 1

prepareBuild \
  CXXFLAGS="$CXXFLAGS" \
  '--enable-release' \
  "--with-io-dir=$io_dir" \
  '--with-libpng-libs=/usr/lib/libpng.a /usr/lib/libz.a' \
  '--with-sigc-libs=/usr/lib/libsigc-1.2.a' \
  '--with-glew-libs=/usr/lib/libGLEW.a'

[BuildUnprepare]
unprepareBuild

[Imports]
echo "going to: $build_root"; cd $build_root; echo "Imports: " `pwd`
ls -l
echo '*' | import

[Prepare]
# Dependency checking
require @libsdl.org/sdl 1.2
require @opengl.org/opengl 1.1
# Use static linking for openal
#require @openal.org/openal 0.0

removeOwningPackage $PREFIX/bin/tnl
removeOwningPackage $PREFIX/share/tnl/scripts/init.io
removeOwningPackage $PREFIX/lib/libiovmall.so

[Install]
# Put your installation script here
installExe bin/tnl*
installIcon share/icons/hicolor
installMenuItem Game share/applications/tnlgame.desktop
(cd share; installData tnl)
installLib lib/libiovmall.so
mkdirs lib/io
copyFiles lib/io/* "$PREFIX/lib/io"

[Uninstall]
# Usually just the following line is enough to uninstall everything
uninstallFromLog


#include "bullet.h"

#define EARTH_GRAVITY 9.81
#define MAX_DEVIATION_PER_SECOND 10.0

Bullet::Bullet(IGame *thegame)
{
    this->thegame = thegame;
    this->renderer = thegame->getRenderer();
    this->state=ALIVE;
    this->terrain = thegame->getTerrain();
}

void Bullet::action()
{
    float random_deviation[3];
    double time_in_secs = thegame->getTimeDelta() / 1000.0;
    p += time_in_secs * v;
    v -= Vector(0, time_in_secs * EARTH_GRAVITY, 0);
    for(int i=0; i<3; i++) {
        random_deviation[i]=time_in_secs * MAX_DEVIATION_PER_SECOND
                * ((float) rand() / (float) RAND_MAX * 2.0 - 1.0) ;
    }
    p += Vector(random_deviation);
    if (p[1] < terrain->getHeightAt(p[0], p[2])) {
        state = DEAD;
        shootSparks();
    }
    TrailPoint t;
    t.p[0] = p[0];
    t.p[1] = p[1];
    t.p[2] = p[2];
    trail.add(t);
}

IActor::State Bullet::getState()
{
    return state;
}

void Bullet::draw()
{
    jvertex_col v1={{ 0.0f, 0.0f, 0.0f},{255.0f,255.0f,0.0f}};

    if (trail.getSize() > 1) {
        renderer->enableAlphaBlending();
        renderer->setVertexMode(JR_VERTEXMODE_GOURAUD);
        renderer->begin(JR_DRAWMODE_CONNECTED_LINES);
        for (int i=0, t_len=trail.getSize(); i<t_len; i++) {
            v1.p.x = trail[i].p[0];
            v1.p.y = trail[i].p[1];
            v1.p.z = trail[i].p[2];
            renderer->setAlpha((float) (i + BULLET_TRAIL_BUFFER - t_len) / (float) BULLET_TRAIL_BUFFER);
            renderer->addVertex(&v1);
        }
        renderer->end();
        renderer->disableAlphaBlending();
    }
}

void Bullet::getLocation(float *loc)
{
    for(int i=0; i<3; i++) loc[i]=p[i];
}

void Bullet::getOrientation(float *front, float *right)
{
    Vector f(v);
    Vector r( Vector(0,1,0) % f.normalize());
    for(int i=0; i<3; i++) front[i]=f[i], right[i]=r[i];
}

Vector Bullet::getMovementVector()
{
    return v;
}

void Bullet::shoot(const Vector &pos, const Vector &vec, const Vector &dir)
{
    p=pos;
    v=vec;
    TrailPoint t;
    t.p[0] = p[0];
    t.p[1] = p[1];
    t.p[2] = p[2];
    trail.add(t);
}

#define NUM_SPARKS 5
#define MAX_HORIZONTAL_SPEED 50.0
#define MAX_VERTICAL_SPEED 50.0
#define RAND ((float) rand() / (float) RAND_MAX * 2.0 - 1.0)
#define RAND_POS ((float) rand() / (float) RAND_MAX)
void Bullet::shootSparks()
{
    float pos[3], vec[3];
    int i,j;
    Ptr<IProjectile> spark = new Spark(thegame);
    
    for (i=0; i<3; i++) pos[i]=p[i];
    pos[1]=terrain->getHeightAt(p[0], p[2]);
    for (i=0; i<NUM_SPARKS; i++) {
        vec[0] = MAX_HORIZONTAL_SPEED * RAND;
        vec[1] = MAX_VERTICAL_SPEED * RAND_POS;
        vec[2] = MAX_HORIZONTAL_SPEED * RAND;
        spark->shoot(pos, vec, Vector(vec).normalize());
        thegame->addActor(spark);
        if (i+1 < NUM_SPARKS) spark=new Spark(thegame);
    }
}
    
